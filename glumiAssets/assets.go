// Code generated by go-bindata.
// sources:
// DefaultShader.fs.glsl
// DefaultShader.vs.glsl
// DO NOT EDIT!

package glumiAssets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _defaultshaderFsGlsl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\xcc\x31\x0a\xc2\x40\x10\x46\xe1\x7e\x60\xee\xf0\x83\x4d\x02\x16\x1a\xd2\x2d\x56\xf1\x08\x5e\x20\x98\x89\x2c\x24\x3b\x61\x32\xbb\x2c\x88\x77\x97\x74\xda\x3e\x1e\xdf\xa9\x88\xed\x51\x13\xfa\xeb\x85\x29\xa7\x38\xab\xad\xd8\xc7\x75\x5b\xc4\xba\x3b\x5c\x6a\x60\x8a\x09\x45\x9e\x1d\x66\x1b\x5f\x0f\xa9\x83\xaa\x4d\x81\x49\xb3\x1f\xbd\x87\x66\xdf\xb2\x0f\xba\xa8\x05\xa6\xa2\x71\xc2\x3a\xc6\xd4\xb4\x78\x33\x01\xf8\x1d\x70\x3b\x50\xcf\x26\x8d\x4b\x3d\xff\x99\x6d\x60\xfa\x7c\x03\x00\x00\xff\xff\x23\x43\xc0\x9e\x93\x00\x00\x00")

func defaultshaderFsGlslBytes() ([]byte, error) {
	return bindataRead(
		_defaultshaderFsGlsl,
		"DefaultShader.fs.glsl",
	)
}

func defaultshaderFsGlsl() (*asset, error) {
	bytes, err := defaultshaderFsGlslBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "DefaultShader.fs.glsl", size: 147, mode: os.FileMode(438), modTime: time.Unix(1519690865, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _defaultshaderVsGlsl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x2e\x4b\x2d\x2a\xce\xcc\xcf\x53\x30\x31\x34\xe0\xe5\xca\xcc\x53\x28\x4b\x4d\x36\x56\x28\x4b\x2d\x2a\xb1\x86\x71\x8d\xc0\xdc\x90\xd4\x0a\xe7\xfc\xfc\xa2\x14\x6b\x5e\xae\xfc\xd2\x12\x88\x78\x5a\x51\x62\x3a\x92\x78\x59\x7e\x66\x8a\x42\x6e\x62\x66\x9e\x86\xa6\x42\x35\x2f\x97\x82\x82\x02\x8a\x0a\x05\x5b\x74\x83\x40\x2a\xd2\x73\xe2\x03\xf2\x8b\x33\x4b\x40\x6e\x00\x29\x48\x36\xd1\x00\xa9\xd2\x51\x30\xd4\xb4\xe6\xe5\xaa\x05\x04\x00\x00\xff\xff\x7b\x9b\xf8\xe1\xa0\x00\x00\x00")

func defaultshaderVsGlslBytes() ([]byte, error) {
	return bindataRead(
		_defaultshaderVsGlsl,
		"DefaultShader.vs.glsl",
	)
}

func defaultshaderVsGlsl() (*asset, error) {
	bytes, err := defaultshaderVsGlslBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "DefaultShader.vs.glsl", size: 160, mode: os.FileMode(438), modTime: time.Unix(1519690865, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"DefaultShader.fs.glsl": defaultshaderFsGlsl,
	"DefaultShader.vs.glsl": defaultshaderVsGlsl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"DefaultShader.fs.glsl": &bintree{defaultshaderFsGlsl, map[string]*bintree{}},
	"DefaultShader.vs.glsl": &bintree{defaultshaderVsGlsl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

